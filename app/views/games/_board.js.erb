// vi: ft=javascript :
// adapted with code from github.com/siansell/pgnviewer
var board<%= game.id %>,
    game<%= game.id %> = new Chess(),
    games,
    currentPly<%= game.id %> = 0,
    currentGame<%= game.id %> = <%= game.id %>,
    statusEl<%= game.id %> = $('#status_<%= game.id %>'),
    fenEl<%= game.id %> = $('#fen_<%= game.id %>'),
    pgnEl<%= game.id %> = $('#pgn_<%= game.id %>');

<% if game.pgn > '' %>
  game<%= game.id %>.load_pgn('<%= game.pgn %>');
  pgnEl<%= game.id %>.html('<%= game.pgn %>');
  gameHistory<%= game.id %> = game<%= game.id %>.history({verbose: true});
  currentPly<%= game.id %> = gameHistory<%= game.id %>.length - 1
<% end %>

// do not pick up pieces if the game is over
// only pick up pieces for the side to move
var onDragStart<%= game.id %> = function(source, piece, position, orientation) {
  if (game<%= game.id %>.game_over() === true ||
      (game<%= game.id %>.turn() === 'w' && piece.search(/^b/) !== -1) ||
      (game<%= game.id %>.turn() === 'b' && piece.search(/^w/) !== -1)) {
    return false;
  }
};

var onDrop<%= game.id %> = function(source, target) {
  // see if the move is legal
  var move = game<%= game.id %>.move({
    from: source,
    to: target,
    promotion: 'q' // NOTE: always promote to a queen for example simplicity
  });

  // illegal move
  if (move === null) return 'snapback';

  updateStatus<%= game.id %>();
};

// update the board position after the piece snap 
// for castling, en passant, pawn promotion
var onSnapEnd<%= game.id %> = function() {
  board<%= game.id %>.position(game<%= game.id %>.fen());
};

var updateStatus<%= game.id %> = function() {
  var status = '';

  var moveColor = 'White';
  if (game<%= game.id %>.turn() === 'b') {
    moveColor = 'Black';
  }

  // checkmate?
  if (game<%= game.id %>.in_checkmate() === true) {
    status = 'Game over, ' + moveColor + ' is in checkmate.';
  }

  // draw?
  else if (game<%= game.id %>.in_draw() === true) {
    status = 'Game over, drawn position';
  }

  // game still on
  else {
    status = moveColor + ' to move';

    // check?
    if (game<%= game.id %>.in_check() === true) {
      status += ', ' + moveColor + ' is in check';
    }
  }

  statusEl<%= game.id %>.html(status);
  //fenEl.html(game.fen());
  fenEl<%= game.id %>.val(game<%= game.id %>.fen());
  pgnEl<%= game.id %>.html(game<%= game.id %>.pgn());
};

// pgnviewer 
var onChange<%= game.id %> = function onChange<%= game.id %>() { //fires when the board position changes
  //highlight the current move
  $("[class^='gameMove<%= game.id %>']").removeClass('highlight');
  $('.gameMove<%= game.id %>' + currentPly<%= game.id %>).addClass('highlight');
}

//used for clickable moves in gametext
//not used for buttons for efficiency
function goToMove<%= game.id %>(ply) {
  if (ply > gameHistory<%= game.id %>.length - 1) ply = gameHistory<%= game.id %>.length - 1;
  game<%= game.id %>.reset();
  for (var i = 0; i <= ply; i++) {
    game<%= game.id %>.move(gameHistory<%= game.id %>[i].san);
  }
  currentPly<%= game.id %> = i - 1;
  board<%= game.id %>.position(game<%= game.id %>.fen());
}

//Write the game to the DOM
function writeGameText<%= game.id %>(g) {

  //remove the header to get the moves
  var h = g.header();
  var gameHeaderText = '<h4>' + h.White + ' (' + h.WhiteElo + ') - ' + h.Black + ' (' + h.BlackElo + ')</h4>';
  gameHeaderText += '<h5>' + h.Event + ', ' + h.Site + ' ' + h.EventDate + '</h5>';
  var pgn = g.pgn();
  var gameMoves<%= game.id %> = pgn.replace(/\[(.*?)\]/gm, '').replace(h.Result, '').trim();

  //format the moves so each one is individually identified, so it can be highlighted
  moveArray = gameMoves<%= game.id %>.split(/([0-9]+\.\s)/).filter(function(n) {return n;});
  for (var i = 0, l = moveArray.length; i < l; ++i) {
    var s = $.trim(moveArray[i]);
    if (!/^[0-9]+\.$/.test(s)) { //move numbers
      m = s.split(/\s+/);
      for (var j = 0, ll = m.length; j < ll; ++j) {
        m[j] = '<span class="gameMove<%= game.id %>' + (i + j - 1) + '"><a id="myLink<%= game.id %>' + (i + j - 1) + '" href="#" onclick="goToMove<%= game.id %>(' + (i + j - 1) + ');return false;">' + m[j] + '</a></span>';
      }
      s = m.join(' ');
    }
    moveArray[i] = s;
  }
  $("#game-data<%= game.id %>").html(gameHeaderText + '<div class="gameMoves<%= game.id %>">' + moveArray.join(' ') + ' <span class="gameResult">' + h.Result + '</span></div>');

}

//buttons
$('#btnStart<%= game.id %>').on('click', function() {
  game<%= game.id %>.reset();
  currentPly<%= game.id %> = -1;
  board<%= game.id %>.position(game<%= game.id %>.fen());
});
$('#btnPrevious<%= game.id %>').on('click', function() {
  if (currentPly<%= game.id %> >= 0) {
    game<%= game.id %>.undo();
    //console.log(currentPly<%= game.id %>);
    currentPly<%= game.id %>--;
    //console.log(currentPly<%= game.id %>);
    board<%= game.id %>.position(game<%= game.id %>.fen());
  }
});
$('#btnNext<%= game.id %>').on('click', function() {
  if (currentPly<%= game.id %> < gameHistory<%= game.id %>.length - 1) {
    currentPly<%= game.id %>++;
    game<%= game.id %>.move(gameHistory<%= game.id %>[currentPly<%= game.id %>].san);
    board<%= game.id %>.position(game<%= game.id %>.fen());
  }
});
$('#btnEnd<%= game.id %>').on('click', function() {
  while (currentPly<%= game.id %> < gameHistory<%= game.id %>.length - 1) {
    currentPly<%= game.id %>++;
    game<%= game.id %>.move(gameHistory<%= game.id %>[currentPly<%= game.id %>].san);
  }
  board<%= game.id %>.position(game<%= game.id %>.fen());
});

//key bindings
$(document).ready(function(){

  $(document).keydown(function(e){
    if (e.keyCode == 39) { //right arrow
      if (e.ctrlKey) {
        $('#btnEnd<%= game.id %>').click();
      } else {
        $('#btnNext<%= game.id %>').click();
      }
      return false;
    }
  });

  $(document).keydown(function(e){
    if (e.keyCode == 37) { //left arrow
      if (e.ctrlKey) {
        $('#btnStart').click();
      } else {
        $('#btnPrevious').click();
      }
    }
    return false;
  });

  /*
     $(document).keydown(function(e){
     if (e.keyCode == 38) { //up arrow
     if (currentGame > 0) {
     if (e.ctrlKey) {
     loadGame(0);
     } else {
     loadGame(currentGame - 1);
     }
     }
     $('#gameSelect').val(currentGame);
     }
     return false;
     });*/

  /*$(document).keydown(function(e){
    if (e.keyCode == 40) { //down arrow
    if (currentGame < pgnData.length - 1) {
    if (e.ctrlKey) {
    loadGame(pgnData.length - 1);
    } else {
    loadGame(currentGame<%= game.id %> + 1);
    }
    }
    $('#gameSelect').val(currentGame<%= game.id %>);
    }
    return false;
    });*/
});
// end pgnviewer

//var initial_position = fenEl.text();
var initial_position = '<%= game.fen %>';
// TODO we need to figure out from this initial position, which move number it is and update
// currentPly<%= game.id %> = position_number_at('fen string');

// main()

$(function() {
  var cfg = {
    snapbackSpeed: 550,
    appearSpeed: 1500,
    draggable: true,
    position: typeof initial_position === 'string' && initial_position != '' ? initial_position : 'start',
    onDragStart: onDragStart<%= game.id %>,
    onDrop: onDrop<%= game.id %>,
    onSnapEnd: onSnapEnd<%= game.id %>,
    onChange: onChange<%= game.id %>,
    //sparePieces: true
  };
  board<%= game.id %> = ChessBoard('board_<%= game.id %>', cfg);
  $('#start_btn_<%= game.id %>').on('click', function() {
    //console.log('clear board');
    board<%= game.id %>.start(true);
    game<%= game.id %>.reset();
    updateStatus<%= game.id %>();
    return false; // prevent default
  });
  $(window).resize(board<%= game.id %>.resize);
  writeGameText<%= game.id %>(game<%= game.id %>);

  // utility functions
  $('#clear_btn_<%= game.id %>').on('click', function() {
    board<%= game.id %>.clear();
    //updateStatus<%= game.id %>();
    return false; // prevent default
  });
  $('#flip_btn_<%= game.id %>').on('click', function() {
    board<%= game.id %>.flip();
    //updateStatus<%= game.id %>();
    return false; // prevent default
  });
  $('#help_btn_<%= game.id %>').on('click', function() {
    // help is for all boards
    $('#board-help').toggle();
    return false; // prevent default
  });
  // end utility functions
});
// end main()
